diff --git a/android/build.gradle b/android/build.gradle
index d48bc32641758c29011dc8f1992015665390e02c..87caa57ac73c47b235bd046d75c1c880be9be489 100644
--- a/android/build.gradle
+++ b/android/build.gradle
@@ -1,5 +1,6 @@
 import java.nio.file.Paths
 import com.android.Version
+import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
 
 def agpVersion = Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')[0].toInteger()
 def androidManifestPath = agpVersion >= 7 ? 'src/main/AndroidManifest.xml' : 'src/hasNamespace/AndroidManifest.xml'
@@ -90,11 +91,27 @@ if (hasWorklets) {
 def enableCodeScanner = safeExtGetBool('VisionCamera_enableCodeScanner', false)
 logger.warn("[VisionCamera] VisionCamera_enableCodeScanner is set to $enableCodeScanner!")
 
+static def findTools(baseDir) {
+  def basePath = baseDir.toPath().normalize()
+  while (basePath) {
+    def toolsPath = Paths.get(basePath.toString(), "tools")
+    if (toolsPath.toFile().exists()) {
+      return toolsPath.toString()
+    }
+    basePath = basePath.getParent()
+  }
+  throw new GradleException("react-native-vision-camera: Failed to find tools/ path!")
+}
+
+def toolsDir = findTools(projectDir)
+
 repositories {
   google()
   mavenCentral()
 }
 
+def os = DefaultNativePlatform.currentOperatingSystem;
+
 android {
   if (agpVersion >= 7) {
     namespace "com.mrousavy.camera"
@@ -131,9 +148,17 @@ android {
     externalNativeBuild {
       cmake {
         cppFlags "-O2 -frtti -fexceptions -Wall -Wno-unused-variable -fstack-protector-all"
-        arguments "-DANDROID_STL=c++_shared",
-                "-DNODE_MODULES_DIR=${nodeModules}",
-                "-DENABLE_FRAME_PROCESSORS=${enableFrameProcessors ? "ON" : "OFF"}"
+        if (os.isWindows()) {
+          arguments "-DANDROID_STL=c++_shared",
+                  "-DNODE_MODULES_DIR=${nodeModules}",
+                  "-DENABLE_FRAME_PROCESSORS=${hasWorklets ? "ON" : "OFF"}",
+                  "-DCMAKE_MAKE_PROGRAM=${toolsDir}\\windows\\ninja.exe",
+                  "-DCMAKE_OBJECT_PATH_MAX=1024"
+        } else {
+          arguments "-DANDROID_STL=c++_shared",
+                  "-DNODE_MODULES_DIR=${nodeModules}",
+                  "-DENABLE_FRAME_PROCESSORS=${hasWorklets ? "ON" : "OFF"}"
+        }
         abiFilters (*reactNativeArchitectures())
       }
     }
diff --git a/android/src/main/java/com/mrousavy/camera/frameprocessors/VisionCameraProxy.kt b/android/src/main/java/com/mrousavy/camera/frameprocessors/VisionCameraProxy.kt
index d697befefc1a1d5b8f21ae9b2925161d03b79306..8de418b0b3196000fa09990b1658bb4196a5c4f9 100644
--- a/android/src/main/java/com/mrousavy/camera/frameprocessors/VisionCameraProxy.kt
+++ b/android/src/main/java/com/mrousavy/camera/frameprocessors/VisionCameraProxy.kt
@@ -7,12 +7,14 @@ import com.facebook.jni.HybridData
 import com.facebook.proguard.annotations.DoNotStrip
 import com.facebook.react.bridge.ReactApplicationContext
 import com.facebook.react.bridge.UiThreadUtil
+import com.facebook.react.common.annotations.FrameworkAPI
 import com.facebook.react.turbomodule.core.CallInvokerHolderImpl
 import com.facebook.react.uimanager.UIManagerHelper
 import com.mrousavy.camera.core.ViewNotFoundError
 import com.mrousavy.camera.react.CameraView
 import java.lang.ref.WeakReference
 
+@OptIn(FrameworkAPI::class)
 @Suppress("KotlinJniMissingFunction") // we use fbjni.
 class VisionCameraProxy(private val reactContext: ReactApplicationContext) {
   companion object {
